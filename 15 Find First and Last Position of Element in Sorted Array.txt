Q:-Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

Code:-
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int s=0;
        int e=nums.length-1;
        int mid = s+((e-s)/2);
        int l=-1;
        int f=-1;
        f=firstO(nums,s,e,target);
        l=lastO(nums,s,e,target);
        int arr[]=new int[2];
        arr[0]=f;
        arr[1]=l;
        return arr;
}
int firstO(int []nums,int s,int e,int t){
    int mid = s+((e-s)/2);
    int ans=-1;
    while(s<=e){
         mid = s+((e-s)/2);
         if(nums[mid]==t){
             ans=mid;
             e=mid-1;
         }else if(nums[mid]>t){
             e=mid -1;
         }else{
             s=mid+1;
         }
    }
    return ans;
}
int lastO(int []nums,int s,int e,int t){
    int mid = s+((e-s)/2);
    int ans=-1;
    while(s<=e){
         mid = s+((e-s)/2);
         if(nums[mid]==t){
             ans=mid;
             s=mid+1;
         }else if(nums[mid]>t){
             e=mid-1;
         }else{
             s=mid+1;
         }}
    return ans;
}
    
}