//Q:-Majority Element


Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?//

//Solution:-

class Solution {
    public int majorityElement(int[] nums) {
        // Arrays.sort(nums);
        // int count=1;
        // int max=0;
        // int ans=nums[0];
        // for(int i=0;i<nums.length-1;i++){
        //     if(nums[i]==nums[i+1]){
        //         count++;
        //     }else{
        //         count=1;
        //     }
        //     if(max<count){
        //             max=count;
        //             ans=nums[i];}}
        // return ans;
        int count=0;
        int element=nums[0];
        int n=  nums.length ;
        for(int i=0;i< nums.length ;i++){
            if(count==0){
                element=nums[i];
            }if(nums[i]==element){
                count++;
            }else{
                count--;
            }if(count> n/2){
                return element;
            }
        } return element;
        }}